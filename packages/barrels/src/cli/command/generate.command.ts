import {createCommand, Option} from "@commander-js/extra-typings";
import type { ExtractArgs } from "../types.js";
import type { ConfigurationInterface } from "../../model/configuration.interface.js";
import { Barrels } from "../../index.js";
import logger from "../../util/logger.js";
import {Location} from "../../enum/location.enum.js";
import {Target} from "../../enum/target.enum.js";

const generateCommand = createCommand('generate')
    .description('Generate barrels')

    .argument('<sources...>')

    .option('--cwd <cwd>', 'Working directory (default: cwd)', () => process.cwd())
    .option('--dry-run', 'Don\'t generate any files', false)
    .addOption(new Option('-l, --location <location>', 'Location of the generated indexes').choices(Object.values(Location)).default(Location.Top))
    .addOption(new Option('-t, --target <target>', 'Target, see docs for defaults').choices(Object.values(Target)))

    .option('-i, --include <include...>', 'Include these files (may be a glob)', ['**/*'])
    .option('-e, --exclude <exclude...>', 'Exclude these files (may be a glob)', [])
    .option('--extensions <extensions...>', 'AAAAA')
    .option('-E, --emit-extensions', 'Emit Extensions', false)
    .option('-A, --emit-assertions', 'Emit Assertions', false)
    .option('-H, --header <header>', 'Header', '@generated by @jojoxd/barrels')

    .action(async (barrels, args) => {
        const configuration = parseArguments(args, barrels);
        const barrelsService = new Barrels();

        logger.inspect('Parsed arguments into configuration', { configuration, });

        const response = await barrelsService.generate(configuration);

        logger.inspect('response of barrelsService.generate', { response });
    });

export function parseArguments(args: GenerateCommandArguments, barrels: string[]): ConfigurationInterface
{
    return {
        barrels: barrels.map((directory) => ({ directory })),

        ...args,
    } satisfies ConfigurationInterface;
}

export default generateCommand;
export type GenerateCommandArguments = ExtractArgs<typeof generateCommand>;